#ifndef VENC_READ_H
#define VENC_READ_H
#include <media_api.h>


#ifndef IN
	#define IN
	#define OUT
	#define IO
#endif

/**********************************************************************************************
 * 函数名	:init_video_enc()
 * 功能	:初始化视频编码器缓冲池结构
 * 输入	:无
 * 输出	:在库中已经定义了一个静态数组存放视频编码器结构
 * 返回值	:0表示成功，负值表示失败
 * 注		:在程序启动时调用一次
 **********************************************************************************************/
int init_video_enc(void);



/**********************************************************************************************
 * 函数名	:get_video_enc()
 * 功能	:获取视频编码器缓冲信息结构指针
 * 输入	:no:需要访问的视频编码器序号
 * 返回值	:指向对应编号视频编码器的结构指针,出错返回NULL
 **********************************************************************************************/
media_source_t *get_video_enc(IN int no);
media_source_t *get_video_enc_keyframe(IN int no);
media_source_t *get_video_enc_playback(IN int no);
/**********************************************************************************************
 * 函数名	:get_video_read_buf()
 * 功能	:获取指定编码器用于读取数据的临时缓冲区指针
 * 输入	:no:需要访问的视频编码器序号
 * 返回值	:指向对应编号视频编码器的结构指针,出错返回NULL
 **********************************************************************************************/
void *get_video_read_buf(IN int no);
void *get_video_read_keyframe_buf(IN int no);
/**********************************************************************************************
 * 函数名	:get_video_read_buf_len()
 * 功能	:获取指定编码器用于读取数据的临时缓冲区长度
 * 输入	:no:需要访问的视频编码器序号
 * 返回值	:临时缓冲区的长度
 **********************************************************************************************/
int get_video_read_buf_len(IN int no);
int get_video_read_keyframe_buf_len(IN int no);

/**********************************************************************************************
 * 函数名	:connect_video_enc()
 * 功能	:连接到指定编号的视频编码器
 * 输入	:no:需要连接的视频编码器序号
 *			name:用户名
 *			pre_sec:从前面邋pre_sec秒的位置开始连接
 *					0:表示从最新的元素连接
 *				      >0:表示要提前秒数
 *					   如果pre_sec的值大于缓冲池中的总帧数则从最早的元素进行连接
 * 返回值	:0表示成功，负值表示失败
 **********************************************************************************************/
int connect_video_enc(IN int no,IN int type,IN char *name,IN int pre_sec);
/** 
 *   @brief     连接视频编码器直到成功
 *   @param  no 视频编码器编号
 *   @param  name 应用程序名
 *   @return   非负表示成功,负值表示失败
 */ 
int connect_video_enc_succ(int no,int type,char *name,int pre_sec);

/**********************************************************************************************
 * 函数名	:connect_video_enc_keyframe()
 * 功能	:I帧缓冲池线程专用,连接到指定编号的视频编码器
 * 输入	:no:需要连接的视频编码器序号
 *	name:用户名
 * 返回值	:0表示成功，负值表示失败
 **********************************************************************************************/
int connect_video_enc_keyframe(IN int no,char *name);
/**********************************************************************************************
 * 函数名	:disconnect_video_enc()
 * 功能	:断开到指定编码器的连接
 * 输入	:no:需要断开的视频编码器序号
 * 返回值	:0表示成功，负值表示失败
 **********************************************************************************************/
int disconnect_video_enc(IN int no);
int disconnect_video_enc_keyframe(IN int no);
/**********************************************************************************************
 * 函数名	:reactive_video_enc()
 * 功能	:重新激活到视频编码器的连接
 * 输入	:no:需要重新激活的视频编码器序号
 * 返回值	:0表示成功，负值表示失败
 * 注		:应用程序应定期调用,防止由于自己一段时间没有响应而被
 *			 videoenc服务断开
 **********************************************************************************************/
int reactive_video_enc(IN int no);
int reactive_video_enc_keyframe(IN int no);



int get_video_enc_remain(IN int no);
int get_video_enc_playback_remain(IN int no);

/**********************************************************************************************
 * 函数名	:read_video_frame()
 * 功能	:从指定编号的编码器中读取一帧数据
 * 输入	:no:需要读取数据的视频编码器序号
 *			:buf_len:frame缓冲区的长度,要是一帧数据超过这个长度则会报错
 * 输出	:frame:准备存放视频帧的缓冲区
 *			 eleseq:视频帧的序号
 *			 flag:视频帧的标志
 * 返回值	:正值表示读取到的字节数，负值表示出错
 **********************************************************************************************/
int read_video_frame(IN int no,OUT void *frame,IN int buf_len,OUT int *eleseq,OUT int *flag);

/**********************************************************************************************
 * 函数名	:read_video_playback()
 * 功能	:从指定编号的编码器中读取一帧回放数据
 * 输入	:no:需要读取数据的视频编码器序号
 *			:buf_len:frame缓冲区的长度,要是一帧数据超过这个长度则会报错
 * 输出	:frame:准备存放视频帧的缓冲区
 *			 eleseq:视频帧的序号
 *			 flag:视频帧的标志
 * 返回值	:正值表示读取到的字节数，负值表示出错
 **********************************************************************************************/

int read_video_playback(IN int no,OUT void * frame,IN int buf_len,OUT int * eleseq,OUT int * flag);
int read_move_media_place(IN int no,int place);


/**********************************************************************************************
 * 函数名	:read_video_keyframe()
 * 功能	:从指定编号的编码器中读取一帧数据,供I帧缓冲池专用
 * 输入	:no:需要读取数据的视频编码器序号
 *			:buf_len:frame缓冲区的长度,要是一帧数据超过这个长度则会报错
 * 输出	:frame:准备存放视频帧的缓冲区
 *			 eleseq:视频帧的序号
 *			 flag:视频帧的标志
 * 返回值	:正值表示读取到的字节数，负值表示出错
 **********************************************************************************************/
int read_video_keyframe(IN int no,OUT void *frame,IN int buf_len,OUT int *eleseq,OUT int *flag);





/**********************************************************************************************
 * 函数名	:get_venc_stat()
 * 功能	:获取指定编号的视频编码器状态
 * 输入	:no:需要获取状态的视频编码器编号
 * 返回值	:负值表示出错-EINVAL:参数错误 -ENOENT:设备还没有连接
 *					ENC_NO_INIT:未初始化
 *					ENC_STAT_OK:状态正常
 *					ENC_STAT_ERR:编码器故障
 **********************************************************************************************/
int get_venc_stat(IN int no);
int get_venc_stat_keyframe(IN int no);
/**********************************************************************************************
 * 函数名	:get_venc_attrib()
 * 功能	:获取指定视频编码器的附加信息结构指针
 * 输入	:no:需要访问的视频编码器编号
 * 返回值	:指向描述视频编码器附加属性的结构指针
 *			 NULL表示出错 ，参数错误，编码器未连接
 **********************************************************************************************/
media_attrib_t *get_venc_attrib(IN int no);
media_attrib_t *get_venc_attrib_keyframe(int no);

extern void change_usr_place(void);

#define MAX_RECORD_CHANNEL    1
#define MAX_RECORD_CHANNEL_M    4
/**********************************************************************************************
 * 函数名   :hdmodule_init_video_enc(int video_channel)
 * 功能         :初始化录像通道视频编码器缓冲池结构
 * 输入         :video_channel:录像通道的初始化
 * 输出         :在库中已经定义了一个静态数组存放视频编码器结构
 * 返回值   :0表示成功，负值表示失败
 * 注              :这是从init_video_enc函数修改来的，为了节省内存。
  *                    在程序启动时调用一次
 **********************************************************************************************/
int init_video_record_enc(int videoenc_channel);
int init_video_record_enc_all();
/**********************************************************************************************
 * 函数名   :getget_venc_attrib_record(int no)
 * 功能 :获取指定视频编码器的附加信息结构指针
 * 输入 :no:需要访问的视频编码器编号
 * 返回值   :指向描述视频编码器附加属性的结构指针
 *           NULL表示出错 ，参数错误，编码器未连接
 **********************************************************************************************/
media_attrib_t *get_venc_attrib_record(int no);
/**********************************************************************************************
 * 函数名   :get_video_record_buf()
 * 功能 :获取指定编码器用于读取数据的临时缓冲区指针
 * 输入 :no:需要访问的视频编码器序号
 * 返回值   :指向对应编号视频编码器的结构指针,出错返回NULL
 **********************************************************************************************/
void *get_video_record_buf(IN int no);

/**********************************************************************************************
 * 函数名   :get_video_record_buf_len()
 * 功能 :获取指定编码器用于读取数据的临时缓冲区长度
 * 输入 :no:需要访问的视频编码器序号
 * 返回值   :临时缓冲区的长度
 **********************************************************************************************/
int get_video_record_buf_len(IN int no);
/**********************************************************************************************
 * 函数名   :reactive_video_record_enc()
 * 功能 :重新激活到视频编码器的连接
 * 输入 :no:需要重新激活的视频编码器序号
 * 返回值   :0表示成功，负值表示失败
 * 注       :应用程序应定期调用,防止由于自己一段时间没有响应而被
 *           videoenc服务断开
 **********************************************************************************************/
int reactive_video_record_enc(IN int no);
/**********************************************************************************************
 * 函数名   :get_video_record_enc_remain()
 * 功能 :返回缓冲区内的可用元素数
 * 输入 :no:需要连接的视频编码器序号
 * 返回值   :缓冲区内的元素数
 **********************************************************************************************/
int get_video_record_enc_remain(IN int no);

/**********************************************************************************************
 * 函数名	:read_video_record_frame()
 * 功能	:从指定编号的编码器中读取一帧数据
 * 输入	:no:需要读取数据的视频编码器序号
 *			:buf_len:frame缓冲区的长度,要是一帧数据超过这个长度则会报错
 * 输出	:frame:准备存放视频帧的缓冲区
 *			 eleseq:视频帧的序号
 *			 flag:视频帧的标志
 * 返回值	:正值表示读取到的字节数，负值表示出错
 **********************************************************************************************/
int read_video_record_frame(IN int no,OUT void *frame,IN int buf_len,OUT int *eleseq,OUT int *flag);
/**********************************************************************************************
 * 函数名	:disconnect_video_record_enc()
 * 功能	:断开到指定编码器的连接
 * 输入	:no:需要断开的视频编码器序号
 * 返回值	:0表示成功，负值表示失败
 **********************************************************************************************/
int disconnect_video_record_enc(IN int no);
/** 
 *   @brief     连接视频编码器直到成功
 *   @param  no 视频编码器编号
 *   @param  name 应用程序名
 *   @return   非负表示成功,负值表示失败
 */ 
int connect_video_record_enc_succ(int no,char *name,int pre_sec);

#endif

