#ifndef AENC_READ_H
#define AENC_READ_H
#include <media_api.h>


#ifndef IN
	#define IN
	#define OUT
	#define IO
#endif
/**********************************************************************************************
 * 函数名	:init_audio_enc()
 * 功能	:初始化音频编码器缓冲池结构
 * 输入	:无
 * 输出	:在库中已经定义了一个静态数组存放音频编码器结构
 * 返回值	:0表示成功，负值表示失败
 * 注		:在程序启动时调用一次
 **********************************************************************************************/
int init_audio_enc(void);

/**********************************************************************************************
 * 函数名	:get_audio_enc()
 * 功能	:获取音频编码器缓冲信息结构指针
 * 输入	:no:需要访问的音频编码器序号
 * 返回值	:指向对应编号音频编码器的结构指针,出错返回NULL
 **********************************************************************************************/
media_source_t *get_audio_enc(IN int no);

/**********************************************************************************************
 * 函数名	:get_audio_enc_playback()
 * 功能	:获取音频编码器缓冲信息结构指针
 * 输入	:no:需要访问的音频编码器序号
 * 返回值	:指向对应编号音频编码器的结构指针,出错返回NULL
 **********************************************************************************************/
media_source_t *get_audio_enc_playback(IN int no);

/**********************************************************************************************
 * 函数名	:get_audio_read_buf()
 * 功能	:获取指定编码器用于读取数据的临时缓冲区指针
 * 输入	:no:需要访问的音频编码器序号
 * 返回值	:指向对应编号音频编码器的结构指针,出错返回NULL
 **********************************************************************************************/
void *get_audio_read_buf(IN int no);

/**********************************************************************************************
 * 函数名	:get_audio_read_buf_len()
 * 功能	:获取指定编码器用于读取数据的临时缓冲区长度
 * 输入	:no:需要访问的音频编码器序号
 * 返回值	:临时缓冲区的长度
 **********************************************************************************************/
int get_audio_read_buf_len(IN int no);

/**********************************************************************************************
 * 函数名	:connect_audio_enc()
 * 功能	:连接到指定编号的音频编码器
 * 输入	:no:需要连接的音频编码器序号
 *			name:用户名
 *			pre_sec:从前面邋pre_sec秒的位置开始连接
 *					0:表示从最新的元素连接
 *				      >0:表示要提前秒数
 *					   如果pre_sec的值大于缓冲池中的总帧数则从最早的元素进行连接
 * 返回值	:0表示成功，负值表示失败
 **********************************************************************************************/
int connect_audio_enc(IN int no,IN int type,IN char *name,IN int pre_sec);

/**********************************************************************************************
 * 函数名	:connect_audio_enc()
 * 功能	:连接到指定编号的音频编码器
 * 输入	:no:需要连接的音频编码器序号
 *			name:用户名
 *			pre_sec:从前面邋pre_sec秒的位置开始连接
 *					0:表示从最新的元素连接
 *				      >0:表示要提前秒数
 *					   如果pre_sec的值大于缓冲池中的总帧数则从最早的元素进行连接
 * 返回值	:0表示成功，负值表示失败
 **********************************************************************************************/
int connect_audio_enc_playback(IN int no,IN int type,IN char *name,IN int pre_sec);


/**********************************************************************************************
 * 函数名	:disconnect_audio_enc()
 * 功能	:断开到指定编码器的连接
 * 输入	:no:需要断开的音频编码器序号
 * 返回值	:0表示成功，负值表示失败
 **********************************************************************************************/
int disconnect_audio_enc(IN int no);

/**********************************************************************************************
 * 函数名	:reactive_audio_enc()
 * 功能	:重新激活到音频编码器的连接
 * 输入	:no:需要重新激活的音频编码器序号
 * 返回值	:0表示成功，负值表示失败
 * 注		:应用程序应定期调用,防止由于自己一段时间没有响应而被
 *			 audioenc服务断开
 **********************************************************************************************/
int reactive_audio_enc(IN int no);

/**********************************************************************************************
 * 函数名	:read_audio_frame()
 * 功能	:从指定编号的编码器中读取一帧数据
 * 输入	:no:需要读取数据的音频编码器序号
 *			:buf_len:frame缓冲区的长度,要是一帧数据超过这个长度则会报错
 * 输出	:frame:准备存放音频帧的缓冲区
 *			 eleseq:音频帧的序号
 *			 flag:音频帧的标志
 * 返回值	:正值表示读取到的字节数，负值表示出错
 **********************************************************************************************/
int read_audio_frame(IN int no,OUT void *frame,IN int buf_len,OUT int *eleseq,OUT int *flag);

/**********************************************************************************************
 * 函数名	:read_audio_playback()
 * 功能	:从指定编号的编码器中读取一帧数据
 * 输入	:no:需要读取数据的音频编码器序号
 *			:buf_len:frame缓冲区的长度,要是一帧数据超过这个长度则会报错
 * 输出	:frame:准备存放音频帧的缓冲区
 *			 eleseq:音频帧的序号
 *			 flag:音频帧的标志
 * 返回值	:正值表示读取到的字节数，负值表示出错
 **********************************************************************************************/
int read_audio_playback(IN int no,OUT void *frame,IN int buf_len,OUT int *eleseq,OUT int *flag);

/**********************************************************************************************
 * 函数名	:get_aenc_stat()
 * 功能	:获取指定编号的音频编码器状态
 * 输入	:no:需要获取状态的音频编码器编号
 * 返回值	:负值表示出错-EINVAL:参数错误 -ENOENT:设备还没有连接
 *					ENC_NO_INIT:未初始化
 *					ENC_STAT_OK:状态正常
 *					ENC_STAT_ERR:编码器故障
 **********************************************************************************************/
int get_aenc_stat(IN int no);

/**********************************************************************************************
 * 函数名	:get_aenc_attrib()
 * 功能	:获取指定音频编码器的附加信息结构指针
 * 输入	:no:需要访问的音频编码器编号
 * 返回值	:指向描述音频编码器附加属性的结构指针
 *			 NULL表示出错 ，参数错误，编码器未连接
 **********************************************************************************************/
media_attrib_t *get_aenc_attrib(int no);

/**********************************************************************************************
 * 函数名	:get_adec_attrib()
 * 功能	:获取指定音频编码器的附加信息结构指针
 * 输入	:no:需要访问的音频编码器编号
 * 返回值	:指向描述音频编码器附加属性的结构指针
 *			 NULL表示出错 ，参数错误，编码器未连接
 **********************************************************************************************/
media_attrib_t *get_adec_attrib(int no);
int recover_playback_aframe2normal(IN int no,IN int count);



/**********************************************************************************************
 * 函数名	:get_audio_rec_read_buf_len()
 * 功能	:获取指定编码器用于读取数据的临时缓冲区长度
 * 输入	:no:需要访问的音频编码器序号
 * 返回值	:临时缓冲区的长度
 **********************************************************************************************/
int get_audio_rec_read_buf_len(IN int no);



/**********************************************************************************************
 * 函数名	:get_audio_rec_read_buf()
 * 功能	:获取指定编码器用于读取数据的临时缓冲区指针
 * 输入	:no:需要访问的音频编码器序号
 * 返回值	:指向对应编号音频编码器的结构指针,出错返回NULL
 **********************************************************************************************/
void *get_audio_rec_read_buf(IN int no);
/**********************************************************************************************
 * 函数名	:reactive_audio_rec_enc()
 * 功能	:重新激活到音频编码器的连接
 * 输入	:no:需要重新激活的音频编码器序号
 * 返回值	:0表示成功，负值表示失败
 * 注		:应用程序应定期调用,防止由于自己一段时间没有响应而被
 *			 audioenc服务断开
 **********************************************************************************************/
int reactive_audio_rec_enc(IN int no);

/**********************************************************************************************
 * 函数名	:disconnect_audio_enc()
 * 功能	:断开到指定编码器的连接
 * 输入	:no:需要断开的音频编码器序号
 * 返回值	:0表示成功，负值表示失败
 **********************************************************************************************/
int disconnect_audio_rec_enc(IN int no);

/**********************************************************************************************
 * 函数名	:read_audio_rec_frame()
 * 功能	:从指定编号的编码器中读取一帧数据
 * 输入	:no:需要读取数据的音频编码器序号
 *			:buf_len:frame缓冲区的长度,要是一帧数据超过这个长度则会报错
 * 输出	:frame:准备存放音频帧的缓冲区
 *			 eleseq:音频帧的序号
 *			 flag:音频帧的标志
 * 返回值	:正值表示读取到的字节数，负值表示出错
 **********************************************************************************************/
int read_audio_rec_frame(IN int no,OUT void *frame,IN int buf_len,OUT int *eleseq,OUT int *flag);
/**********************************************************************************************
 * 函数名	:get_aenc_rec_stat()
 * 功能	:获取指定音频编码器的附加信息结构指针
 * 输入	:no:需要访问的音频编码器编号
 * 返回值	:指向描述音频编码器附加属性的结构指针
 *			 NULL表示出错 ，参数错误，编码器未连接
 **********************************************************************************************/
int get_aenc_rec_stat(IN int no);

/**********************************************************************************************
 * 函数名	:get_audio_enc_rec_remain()
 * 功能	:获取指定音频编码器的内存池的个数
 * 输入	:no:需要访问的音频编码器编号
 * 返回值	:指向描述音频编码器附加属性的结构指针
 *			 NULL表示出错 ，参数错误，编码器未连接
 **********************************************************************************************/
int get_audio_enc_rec_remain(IN int no);
/**********************************************************************************************
 * 函数名	:get_aenc_rec_attrib()
 * 功能	:获取指定音频编码器的附加信息结构指针
 * 输入	:no:需要访问的音频编码器编号
 * 返回值	:指向描述音频编码器附加属性的结构指针
 *			 NULL表示出错 ，参数错误，编码器未连接
 **********************************************************************************************/
media_attrib_t *get_aenc_rec_attrib(int no);

/**********************************************************************************************
 * 函数名	:connect_audio_rec_enc()
 * 功能	:连接到指定编号的音频编码器
 * 输入	:no:需要连接的音频编码器序号
 *			name:用户名
 *			pre_sec:从前面邋pre_sec秒的位置开始连接
 *					0:表示从最新的元素连接
 *				      >0:表示要提前秒数
 *					   如果pre_sec的值大于缓冲池中的总帧数则从最早的元素进行连接
 * 返回值	:0表示成功，负值表示失败
 **********************************************************************************************/
int connect_audio_rec_enc(IN int no,IN char *name,IN int pre_sec);
/**********************************************************************************************
 * 函数名	:init_audio_rec_enc()
 * 功能	:初始化音频编码器缓冲池结构
 * 输入	:第几路音频
 * 输出	:在库中已经定义了一个静态数组存放音频编码器结构
 * 返回值	:0表示成功，负值表示失败
 * 注		:在程序启动时调用一次
 **********************************************************************************************/
int init_audio_rec_enc(int no);
int init_audio_rec_enc_all();


#endif
