#ifndef _SOUND_API_H
#define _SOUND_API_H

/*	new sound application interface for ALSA-OSS integration, 
	by wsy @March 2007 */

#ifndef IN
	#define IN
	#define OUT	
	#define IO
#endif
typedef void snd_dev_t;	//声音设备类型，用于统一化alsa和oss下的声音设备描述



//====================打开和关闭设备==============================//

/**********************************************************************************************
 * 函数名	:open_audio_play_dev()
 * 功能	:打开音频播放设备
 * 输入	:无
 * 返回值	:已打开设备的描述符(句柄)，若发生错误，错误号存在errno中
 **********************************************************************************************/
snd_dev_t * open_audio_play_dev(void);

/**********************************************************************************************
 * 函数名	:open_audio_rec_dev()
 * 功能	:打开音频采集设备
 * 输入	:无
 * 返回值	:已打开设备的描述符(句柄)，若发生错误，错误号存在errno中
 **********************************************************************************************/
snd_dev_t * open_audio_rec_dev(void);

/**********************************************************************************************
 * 函数名	:close_audio_play_dev()
 * 功能	:关闭音频播放设备并把相应指针置空
 * 输入	:dev_p:打开该设备时返回的设备结构指针的指针
 * 返回值	:为0表示成功，为负值表示发生错误
 **********************************************************************************************/
int  close_audio_play_dev(snd_dev_t ** dev_p);

/**********************************************************************************************
 * 函数名	:close_audio_rec_dev()
 * 功能	:关闭音频采集设备并把相应指针置空
 * 输入	:dev_p:打开该设备时返回的设备结构指针的指针
 * 返回值	:为0表示成功，为负值表示发生错误
 **********************************************************************************************/
int  close_audio_rec_dev(snd_dev_t ** dev_p);









//========================设置声音参数=============================//
/**********************************************************************************************
 * 函数名	:set_audio_dev()
 * 功能	:设置音频的参数，包括采样率，采样位数和通道数,分片长度和缓冲区内含有的分片数
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 *		 sam_rate:采样率，单位为Hz
 *		 sam_size:采样位数,单位为bit
 *		 channels:采样通道数
 *		 fragsize:分片长度，单位为Byte数的以2为底的对数,如fragsize=10代表fragment长度为1024字节
 *		 fragnr:缓冲区内含有的分片数
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
 int set_audio_params(snd_dev_t * snddev, int sam_rate, int sam_size, int channels, int fragsize,int fragnr);

/**********************************************************************************************
 * 函数名	:set_playback_start_threshold_nr()
 * 功能	:设置播放音频时触发传输的fragment个数，以调节播放的性能
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 *		 start_fragnr:当缓冲区内有这么多个fragment都满了时才开始播放
 						 如果该值小于0，则使用默认值
 * 返回值	:0表示成功负值表示出错
 * 说明:	请在调用set_audio_params后，为播放设备调用此函数，以调节性能
 **********************************************************************************************/
int set_playback_start_threshold_nr(snd_dev_t *snddev, int start_fragnr);
#if 1
/**********************************************************************************************
 * 函数名	:set_playback_blocknr()
 * 功能	:设置播放音频时缓冲区为非阻塞写保留的fragment个数，以调节播放的性能
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 *		 blocknr:只有当写入数据后，缓冲区内的空余量仍有这么多个fragment时才写这部分数据
 						 如果该值小于0，则进行阻塞写
 * 返回值	:0表示成功负值表示出错
 * 说明:	请在打开声音设备后，为播放设备调用此函数，以调节性能
 			如果没有调此函数，则使用默认值(3,表示3/8个缓冲区)的非阻塞写
 **********************************************************************************************/
 int set_playback_blocknr(snd_dev_t *snddev, int blocknr);
#endif

/**********************************************************************************************
 * 函数名	:set_audio_ready()
 * 功能	:使已打开并设置好参数的音频设备准备好进行数据读写
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int set_audio_ready(snd_dev_t * snddev);






//========================调节音量，增益，静音等===================//

/**********************************************************************************************
 * 函数名	:set_audio_in_gain()
 * 功能	:设置音频输入增益
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 *		 vol:音频输入增益的值，范围为0~100
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int set_audio_in_gain(snd_dev_t * snddev, int vol);

/**********************************************************************************************
 * 函数名	:set_audio_out_volume()
 * 功能	:设置音频输出的音量
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 *		 vol:输出音量的值，范围为0~100
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int set_audio_out_volume(snd_dev_t * snddev, int vol);

/**********************************************************************************************
 * 函数名	:set_audio_out_mute()
 * 功能	:设置音频输出的静音模式
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 *		 mute:0表示打开声音输出
 *			 	   1表示输出静音
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int set_audio_out_mute(snd_dev_t * snddev, int mute);


//===========================获取缓冲区状态==========================//
/**********************************************************************************************
 * 函数名	:get_output_buffer_filled()
 * 功能	:获取输出缓冲区的待播放字节数
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 * 返回值	:正值表示缓冲区中的待播放字节数 负值表示出错
 **********************************************************************************************/
int get_output_buffer_filled(snd_dev_t * snddev);


/**********************************************************************************************
 * 函数名	:get_audio_buffer_size()
 * 功能	:获取声音设备的缓冲区长度，单位字节
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 * 返回值	:正值表示缓冲区长度字节数 负值表示出错
 **********************************************************************************************/
int get_audio_buffer_size(snd_dev_t * snddev);

/**********************************************************************************************
 * 函数名	:get_audio_period_size()
 * 功能	:获取声音设备的fragment长度，单位字节
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 * 返回值	:正值表示fragment长度字节数 负值表示出错
 **********************************************************************************************/
int get_audio_period_size(snd_dev_t * snddev);





//============================读和写================================//
/**********************************************************************************************
 * 函数名	:read_audio_data()
 * 功能	:从音频采集设备读取音频数据
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 *		 len:原始数据的大小
 * 输出	:buf:待填充的缓冲区指针
 * 返回值	:正值表示缓冲区中的有效字节数 负值表示出错
 **********************************************************************************************/
int read_audio_data(IN snd_dev_t * snddev, OUT char *buf, IN int len);

/**********************************************************************************************
 * 函数名	:write_audio_data()
 * 功能	:将缓冲区数据输出到音频播放设备进行播放
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 *		 buf:存放数据的缓冲区
 *		 len:缓冲区中的有效数据字节数
 * 返回值	:正值表示成功播放的字节数 负值表示出错
 **********************************************************************************************/
int write_audio_data(IN snd_dev_t *snddev, IN char *buf, IN int len);












//==============================清空缓冲区等=========================//
/**********************************************************************************************
 * 函数名	:reset_audio_inbuf()
 * 功能	:清空音频输入缓冲区
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int reset_audio_inbuf(snd_dev_t * snddev);

/**********************************************************************************************
 * 函数名	:reset_audio_outbuf()
 * 功能	:清空音频输出缓冲区
 * 输入	:snddev:打开该设备时返回的设备描述句柄
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int reset_audio_outbuf(snd_dev_t * snddev);



#endif
