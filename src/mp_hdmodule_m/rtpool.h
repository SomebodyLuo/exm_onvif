#ifndef RTPOOL_H
#define RTPOOL_H

#include <pthread.h>
#include <semaphore.h>

struct pool_ele_struct{			//缓冲池里的元素结构
	DWORD	ele_type;			//元素类型 i/p/audio
	struct pool_ele_struct *next;	//指向后一个元素
	BYTE  element[4]	;			//元素
};
struct pool_head_struct{		//缓冲池结构
	int	total_size;				//缓冲池中可容纳的元素总数
	int   count;					//有效元素个数
	int	plen;					//每个元素可容纳的对象大小
	sem_t  ssema;				//表示缓冲池有新元素的信号量
	pthread_mutex_t mutex;		//操作缓冲池数据的互斥体
	struct pool_ele_struct **pool;	//缓冲池
	struct pool_ele_struct *free;	//指向第一个空闲缓冲区
	struct pool_ele_struct *active;	//指向第一个有效元素
};

/**********************************************************************************************
 * 函数名	:mkrtpool()
 * 功能	:创建一个元素长为plen,可容纳num个元素的缓冲池
 * 输入	:plen:缓冲池容纳的最大元素字节数
 *			 num:缓冲池中的元素总数
 * 输出	:head:描述缓冲池结构的指针，返回时填充内容
 * 返回值	:0表示成功负值表示出错
 **********************************************************************************************/
int mkrtpool(struct pool_head_struct *head,int plen,int num);

/**********************************************************************************************
 * 函数名	:initrtpool()
 * 功能	:初始化一个缓冲池,
 * 输出	:head:描述缓冲池结构的指针，返回时填充内容
 * 返回值	:0表示成功负值表示出错
 * 注		:必须在mkrtpool之后调用
 **********************************************************************************************/
int initrtpool(struct pool_head_struct *head);

/**********************************************************************************************
 * 函数名	:get_free_eleroom()
 * 功能	:从缓冲池获得一个空闲的空间
 * 输入	:head:描述缓冲池结构的指针
 * 返回值	:指向剩余空间的指针 返回NULL表示没有空闲空间
 **********************************************************************************************/
struct pool_ele_struct *get_free_eleroom(struct pool_head_struct *head);

/**********************************************************************************************
 * 函数名	:put_active_ele()
 * 功能	:将元素放入有效元素队列尾部
 * 输入	:head:描述缓冲池结构的指针
 *			 active:指向要放入的元素指针
 * 返回值	:0表示成功，负值表示出错
 **********************************************************************************************/
int put_active_ele(struct pool_head_struct *head,struct pool_ele_struct *active);

/**********************************************************************************************
 * 函数名	:get_active_ele()
 * 功能	:取出缓冲池中第一个有效元素
 * 输入	:head:描述缓冲池结构的指针
 * 返回值	:指向第一个有效元素的指针 NULL表示没有有效元素
 **********************************************************************************************/
struct pool_ele_struct *get_active_ele(struct pool_head_struct *head);

/**********************************************************************************************
 * 函数名	:free_ele()
 * 功能	:将一个用过的元素放入缓冲池的空闲队列
 * 输入	:head:描述缓冲池结构的指针
 *			 ele:指向空闲元素的指针
 * 返回值	:0表示成功 负值表示失败
 **********************************************************************************************/
int free_ele(struct pool_head_struct *head,struct pool_ele_struct *ele);

/**********************************************************************************************
 * 函数名	:set_ele_type()
 * 功能	:设置一个元素的类型
 * 输入	:ele:指向一个元素的指针
 *			 type:要设置的类型
 * 返回值	:无
 **********************************************************************************************/
static __inline void set_ele_type(struct pool_ele_struct *ele,DWORD type)
{
	ele->ele_type=type;
}

/**********************************************************************************************
 * 函数名	:drop_ele_type()
 * 功能	:从有效元素缓冲区中删除num个type类型的元素
 * 输入	:head:描述缓冲池结构的指针
 *			 type:要丢弃的元素类型
 *			 num:要丢弃的元素数量
 * 返回值	:正值表示成功丢弃的元素个数，负值表示出错
 **********************************************************************************************/
int drop_ele_type(struct pool_head_struct *head,DWORD type,int num);

/**********************************************************************************************
 * 函数名	:get_pool_active_num()
 * 功能	:获取缓冲池中有效元素的个数
 * 输入	:head:描述缓冲池结构的指针
 * 返回值	:>=0表示缓冲池中有效元素的个数 负值表示失败
 **********************************************************************************************/
int	get_pool_active_num(struct pool_head_struct *head);

/**********************************************************************************************
 * 函数名	:get_pool_free_num()
 * 功能	:获取缓冲池剩余元素空间的个数
 * 输入	:head:描述缓冲池结构的指针
 * 返回值	:>=0表示缓冲池中的剩余空间个数  负值表示失败
 **********************************************************************************************/
int	get_pool_free_num(struct pool_head_struct *head);


#endif
